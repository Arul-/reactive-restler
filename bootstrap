#!/opt/bin/php
<?php

use Lambda\Convert;
use LogicalSteps\Async\Async;
use Luracast\Restler\Defaults;
use Luracast\Restler\Restler;
use Luracast\Restler\Utils\Dump;
use Swoole\Coroutine\Http\Client;

require __DIR__ . '/api/bootstrap.php';

Defaults::$cacheDirectory = '/tmp/store';
Defaults::$implementations[HttpClientInterface::class] = [SwooleHttpClient::class];

function loop()
{
    do {
        try {
            $data = yield 'request';
            if ('id' === $data['invocationId']) continue;
            //echo 'request: ' . json_encode($data, JSON_PRETTY_PRINT) . PHP_EOL;
            $psrRequest = Convert::toPSR7($data['requestBody'], $data['headers']);
            echo Dump::request($psrRequest);
            $psrResponse = yield (new Restler)->handle($psrRequest);
            echo Dump::response($psrResponse) . PHP_EOL . PHP_EOL;
            //echo json_encode(Convert::fromPSR7($psrResponse), JSON_PRETTY_PRINT) . PHP_EOL;
            echo '-----------------------------------------' . PHP_EOL;
            yield ['response', $data['invocationId'], json_encode(Convert::fromPSR7($psrResponse))];
        } catch (Exception $exception) {
            //echo 'Failed! ' . $exception->getMessage() . PHP_EOL;
            Co::sleep(1);
        }
    } while (true);
}

Async::await(loop());

function client()
{
    static $host = null;
    static $port = null;
    if (!$host) {
        $host = $_ENV['AWS_LAMBDA_RUNTIME_API'] ?? '127.0.0.1:9001';
        [$host, $port] = explode(':', $host);
    }
    return new Client($host, $port);
}

function request($callback)
{
    go(function () use ($callback) {
        $client = client();
        $client->get($path = '/2018-06-01/runtime/invocation/next');
        $statusCode = $client->getStatusCode();
        if ($statusCode < 0) {
            $client->close();
            $callback(new Exception(
                $statusCode . ' Lambda server is not running at http://' .
                $client->host . ':' . $client->port . $path
            ), null);
            return;
        }
        $headers = $client->getHeaders() ?? [];
        $requestBody = json_decode((string)$client->body, true) ?? [];
        $invocationId = $headers['lambda-runtime-aws-request-id'] ?? 'id';
        $result = compact('invocationId', 'headers', 'statusCode', 'requestBody');
        $client->close();
        $callback(null, $result);
    });
}

function response($invocationId, $response, $callback)
{
    go(function () use ($invocationId, $response, $callback) {
        $client = client();
        $client->post("/2018-06-01/runtime/invocation/{$invocationId}/response", $response);
        $result = $client->getStatusCode();
        $client->close();
        $callback(null, $result);
    });
}
